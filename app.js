const USERS = [  
    {name: "–í–µ—Ä–∞", age: 4, key: "vera"},  
    {name: "–ú–∞—Ç–≤–µ–π", age: 7, key: "matvey"},  
    {name: "–ù–∏–∫–∏—Ç–∞", age: 12, key: "nikita"}  
];  
const USER_STYLES = {  
    "–í–µ—Ä–∞":"vera",  
    "–ú–∞—Ç–≤–µ–π":"matvey",  
    "–ù–∏–∫–∏—Ç–∞":"nikita"  
};  
const TODAY = new Date();  
const IS_SUMMER = (TODAY.getMonth() === 5 || TODAY.getMonth() === 6 || TODAY.getMonth() === 7);  

function shuffle(array) {  
  let arr = array.slice();  
  for (let i = arr.length - 1; i > 0; i--) {  
    const j = Math.floor(Math.random() * (i + 1));  
    [arr[i], arr[j]] = [arr[j], arr[i]];  
  }  
  return arr;  
}  

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ù–∏–∫–∏—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é "—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"  
function getNikitaQuestions() {  
    let base = [  
        {  
            label: "–ö–µ–º —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –≥–æ–¥?",  
            key: "future",  
            type: "emoji+input",  
            options: [  
                {emoji:"üë®‚Äçüî¨", text:"–°—Ç–∞—Ç—å —É–º–Ω–µ–µ"},  
                {emoji:"üèÜ", text:"–õ—É—á—à–µ –≤ —Å–ø–æ—Ä—Ç–µ"},  
                {emoji:"üßë‚Äçüé®", text:"–†–∞–∑–≤–∏–≤–∞—Ç—å —Ç–∞–ª–∞–Ω—Ç—ã"},  
                {emoji:"‚ù§Ô∏è", text:"–°–∏–ª—å–Ω–µ–µ –≤ –≤–µ—Ä–µ –∏ —Å–µ–º—å–µ"},  
                {emoji:"‚úçÔ∏è", text:"–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"}  
            ],  
            bg: "linear-gradient(120deg,#ffcdd2 60%, #fbc02d 100%)", icon: "üéØ"  
        },  
        {  
            label: "–ö–∞–∫ –±—ã –ø–æ—Å—Ç—É–ø–∏–ª –ò–∏—Å—É—Å –≤ —Ç–≤–æ–µ–π —Ç—Ä—É–¥–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?",  
            key: "jesus",  
            type: "emoji+input",  
            options: [  
                {emoji:"ü§ù", text:"–ü—Ä–æ—è–≤–∏–ª –¥–æ–±—Ä–æ—Ç—É"},  
                {emoji:"üôè", text:"–ü–æ–º–æ–ª–∏–ª—Å—è"},  
                {emoji:"ü§≤", text:"–ü–æ–º–æ–≥ –¥—Ä—É–≥–æ–º—É"},  
                {emoji:"üòå", text:"–ü—Ä–æ—Å—Ç–∏–ª"},  
                {emoji:"‚úçÔ∏è", text:"–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"}  
            ],  
            bg: "linear-gradient(120deg,#ece9f7,#ffcdd2 100%)", icon: "‚úùÔ∏è"  
        },  
        {  
            label: "–ß—Ç–æ –¥–µ—Ä–∂–∏—Ç —Ç–µ–±—è –±–ª–∏–∂–µ –∫ –ë–æ–≥—É?",  
            key: "bibleclose",  
            type: "emoji+input",  
            options: [  
                {emoji:"üìñ", text:"–ß–∏—Ç–∞—é –ë–∏–±–ª–∏—é"},  
                {emoji:"üôè", text:"–ú–æ–ª—é—Å—å"},  
                {emoji:"‚ù§Ô∏è", text:"–°—Ç–∞—Ä–∞—é—Å—å –¥–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ"},  
                {emoji:"üë™", text:"–°–µ–º–µ–π–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã"},  
                {emoji:"‚úçÔ∏è", text:"–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"}  
            ],  
            bg: "linear-gradient(120deg,#fffde7, #e1bee7 100%)", icon: "üôå"  
        },  
        {  
            label: "–ß—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω?",  
            key: "notPhone",  
            type: "emoji+input",  
            options: [  
                {emoji:"üìó", text:"–ö–Ω–∏–≥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ"},  
                {emoji:"üèÉ", text:"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"},  
                {emoji:"üòÉ", text:"–û–±—â–µ–Ω–∏–µ —Å —Å–µ–º—å—ë–π"},  
                {emoji:"üí°", text:"–°—Ç–∞—Ç—å –ª—É—á—à–µ"},  
                {emoji:"‚úçÔ∏è", text:"–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"}  
            ],  
            bg: "linear-gradient(120deg,#c1c8e4,#f9f9f9 100%)", icon: "üìµ"  
        },  
        {  
            label: "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å –≤–∞–∂–Ω–æ–≥–æ –¥–ª—è —Å–µ–º—å–∏?",  
            key: "family",  
            type: "emoji+input",  
            options: [  
                {emoji:"ü•ó", text:"–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–ª–∏ –ø–æ–º–æ—á—å"},  
                {emoji:"üßπ", text:"–£–±—Ä–∞—Ç—å—Å—è"},  
                {emoji:"üéÅ", text:"–ü–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Ä–æ–¥–Ω—ã—Ö"},  
                {emoji:"üí¨", text:"–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏"},  
                {emoji:"‚úçÔ∏è", text:"–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"}  
            ],  
            bg: "linear-gradient(120deg, #ffe0b2, #ffb6b9 100%)", icon: "üë™"  
        },  
        {  
            label: "–ö–æ–≥–¥–∞ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –∑–∞–π–º—ë—à—å—Å—è —É—Ä–æ–∫–∞–º–∏?",  
            key: "study",  
            type: "emoji+input",  
            options: [  
                {emoji:"‚è≤", text:"–°—Ä–∞–∑—É –ø–æ—Å–ª–µ —à–∫–æ–ª—ã"},  
                {emoji:"üåÖ", text:"–ü–æ—Å–ª–µ –æ–±–µ–¥–∞"},  
                {emoji:"üåô", text:"–ü–µ—Ä–µ–¥ —Å–Ω–æ–º (–Ω–µ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)"},  
                {emoji:"üîÑ", text:"–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω—è—Ç"},  
                {emoji:"‚úçÔ∏è", text:"–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"}  
            ],  
            bg: "linear-gradient(120deg, #e3f2fd, #ffe0b2 100%)", icon: "üìö"  
        },  
        {  
            label: IS_SUMMER ? "–ß—Ç–æ –±—É–¥–µ—à—å —á–∏—Ç–∞—Ç—å —ç—Ç–∏–º –ª–µ—Ç–æ–º?" : "–ß—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–µ—à—å —Å–µ–≥–æ–¥–Ω—è?",  
            key: "read",  
            type: "emoji+input",  
            options: [  
                {emoji:"üìñ", text:"–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"},  
                {emoji:"üìö", text:"–ë–∏–±–ª–∏—é"},  
                {emoji:"üì∞", text:"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ"},  
                {emoji:"‚úçÔ∏è", text:"–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"}  
            ],  
            bg: "linear-gradient(120deg,#e1f5fe,#ffcdd2 100%)", icon: "üìñ"  
        },  
        {  
            label: "–ß—Ç–æ –±—ã —Ç—ã –∑–∞–ø–∏—Å–∞–ª (–î–ó, –º—ã—Å–ª—å, –ø–ª–∞–Ω—ã) –≤ –¥–Ω–µ–≤–Ω–∏–∫ –∏–ª–∏ —Ç–µ—Ç—Ä–∞–¥—å?",  
            key: "journal",  
            type: "emoji+input",  
            options: [  
                {emoji:"üìù", text:"–î–æ–º–∞—à–∫–∞"},  
                {emoji:"‚úçÔ∏è", text:"–ú—ã—Å–ª–∏/–ø–ª–∞–Ω—ã"},  
                {emoji:"üìñ", text:"–°—Ç–∏—Ö –∏–ª–∏ –∏–¥–µ—è –∏–∑ –ë–∏–±–ª–∏–∏"},  
                {emoji:"ü§î", text:"–í–æ–ø—Ä–æ—Å —Ä–æ–¥–∏—Ç–µ–ª—è–º"},  
                {emoji:"‚úçÔ∏è", text:"–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"}  
            ],  
            bg: "linear-gradient(120deg,#b2f7ef,#fadcff 100%)", icon: "üìî"  
        },  
        {  
            label: "–ß—Ç–æ –±—ã —Ç—ã –∏–∑–º–µ–Ω–∏–ª –≤ —Å–≤–æ—ë–º –¥–Ω–µ?",  
            key: "change",  
            type: "emoji+input",  
            options: [  
                {emoji:"‚è≤", text:"–ú–µ–Ω—å—à–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"},  
                {emoji:"üí¨", text:"–ë–æ–ª—å—à–µ –æ–±—â–∞—Ç—å—Å—è —Å —Ä–æ–¥–Ω—ã–º–∏"},  
                {emoji:"üìù", text:"–õ—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å"},  
                {emoji:"ü§ù", text:"–ë–æ–ª—å—à–µ –ø–æ–º–æ–≥–∞—Ç—å"},  
                {emoji:"‚úçÔ∏è", text:"–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"}  
            ],  
            bg: "linear-gradient(120deg,#fbed96,#abecd6 100%)", icon: "üîÅ"  
        }  
    ];  
    // –º–µ—à–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –ø–µ—Ä–≤—ã–π ‚Äî ‚Äú–∫–µ–º —Å—Ç–∞—Ç—å‚Äù  
    let first = base.splice(0,1);  
    let rest = shuffle(base);  
    return first.concat(rest);  
}  

const QUESTIONS_SET = {  
    "–í–µ—Ä–∞": [  
        {  
            label: "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",  
            key: "feel",  
            type: "emoji",  
            options: [  
                {emoji:"üòä", text:"–í–µ—Å–µ–ª–æ!"},  
                {emoji:"üò¥", text:"–°–æ–Ω–Ω–æ"},  
                {emoji:"üòï", text:"–ì—Ä—É—Å—Ç–Ω–æ"}  
            ],  
            bg: "linear-gradient(120deg,#fffde7 50%, #f8bbd0 100%)",  
            icon: "üåû"  
        },  
        {  
            label: "–ß—Ç–æ —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å?",  
            key: "dream",  
            type: "emoji",  
            options: [  
                {emoji:"ü¶Ñ", text:"–í–æ–ª—à–µ–±—Å—Ç–≤–æ"},  
                {emoji:"üê±", text:"–ñ–∏–≤–æ—Ç–Ω—ã–µ"},  
                {emoji:"üôà", text:"–ù–µ –ø–æ–º–Ω—é"}  
            ],  
            bg: "linear-gradient(120deg,#e1f5fe 50%, #ede7f6 100%)",  
            icon: "üí§"  
        },  
        {  
            label: "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞—Ç—å?",  
            key: "goal",  
            type: "emoji",  
            options: [  
                {emoji:"üé®", text:"–†–∏—Å–æ–≤–∞—Ç—å"},  
                {emoji:"ü§∏", text:"–ò–≥—Ä–∞—Ç—å"},  
                {emoji:"üìö", text:"–°–ª—É—à–∞—Ç—å —Å–∫–∞–∑–∫—É"}  
            ],  
            bg: "linear-gradient(120deg,#fcebb6 50%, #f8bbd0 100%)",  
            icon: "üåà"  
        }  
    ],  
    "–ú–∞—Ç–≤–µ–π": [  
        {  
            label: "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",  
            key: "feel",  
            type: "emoji",  
            options: [  
                {emoji:"üòÉ", text:"–ö–ª–∞—Å—Å–Ω–æ"},  
                {emoji:"üôÇ", text:"–•–æ—Ä–æ—à–æ"},  
                {emoji:"üòï", text:"–ù–µ –æ—á–µ–Ω—å"}  
            ],  
            bg: "linear-gradient(120deg,#e3f5fe 50%, #b3e5fc 100%)",  
            icon: "‚òÄÔ∏è"  
        },  
        {  
            label: "–ß—Ç–æ —Ç–µ–±–µ —Å–Ω–∏–ª–æ—Å—å?",  
            key: "dream",  
            type: "emoji",  
            options: [  
                {emoji:"üöó", text:"–ú–∞—à–∏–Ω—ã"},  
                {emoji:"ü¶∏", text:"–ì–µ—Ä–æ–∏"},  
                {emoji:"üò¥", text:"–ù–µ –ø–æ–º–Ω—é"}  
            ],  
            bg: "linear-gradient(120deg,#fff8e1 50%, #b3e5fc 100%)",  
            icon: "üí§"  
        },  
        {  
            label: "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",  
            key: "learn",  
            type: "emoji",  
            options: [  
                {emoji:"üåç", text:"–ü—Ä–æ –º–∏—Ä"},  
                {emoji:"ü¶ï", text:"–ü—Ä–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"},  
                {emoji:"ü§î", text:"–ß—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ"}  
            ],  
            bg: "linear-gradient(120deg,#e1f5fe 50%, #ffe0b2 100%)",  
            icon: "üîç"  
        },  
        {  
            label: "–ß–µ–º –ø–æ–º–æ–∂–µ—à—å –¥–æ–º–∞ —Å–µ–≥–æ–¥–Ω—è?",  
            key: "help",  
            type: "emoji",  
            options: [  
                {emoji:"ü•£", text:"–ù–∞–∫—Ä–æ—é –Ω–∞ —Å—Ç–æ–ª"},  
                {emoji:"üßπ", text:"–£–±–µ—Ä—É –∏–≥—Ä—É—à–∫–∏"},  
                {emoji:"üòä", text:"–ü–æ–º–æ–≥—É –º–∞–º–µ"}  
            ],  
            bg: "linear-gradient(120deg,#c8e6c9 50%, #b3e5fc 100%)",  
            icon: "üå±"  
        },  
        {  
            label: IS_SUMMER ?  
                "–ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—à—å —á–∏—Ç–∞—Ç—å?" :  
                "–ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø–æ—á–∏—Ç–∞–µ—à—å?",  
            key: "read",  
            type: "emoji",  
            options: [  
                {emoji:"üìö", text:"–ö–Ω–∏–≥—É"},  
                {emoji:"üìñ", text:"–ë–∏–±–ª–∏—é"},  
                {emoji:"üì∞", text:"–ñ—É—Ä–Ω–∞–ª"}  
            ],  
            bg: "linear-gradient(120deg,#fffde7 50%, #b3e5fc 100%)",  
            icon: "üìö"  
        }  
    ],  
    "–ù–∏–∫–∏—Ç–∞": getNikitaQuestions()  
};  

// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´  
const app = document.getElementById('app');  
let currentUser = null;  
let answers = {};  
let step = 0;  
let QUESTIONS = [];  

function reset() {
    currentUser = null;
    answers = {};
    step = 0;
}
function today() {
    const d = new Date();
    return d.getFullYear() + "-" + String(d.getMonth()+1).padStart(2,'0') + "-" + String(d.getDate()).padStart(2,'0');
}
function saveAnswers(user, date, answers) {
    const storageKey = "answers_" + user;
    let all = JSON.parse(localStorage.getItem(storageKey) || "[]");
    all = all.filter(record => record.date !== date);
    all.unshift({date, answers});
    localStorage.setItem(storageKey, JSON.stringify(all.slice(0, 13)));
}
function getAnswers(user) {
    const storageKey = "answers_" + user;
    return JSON.parse(localStorage.getItem(storageKey) || "[]");
}
function motivationPhrase(name) {
    const phrases = [
        "–ü—É—Å—Ç—å —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è –≤—Å—ë, —á—Ç–æ –∑–∞–¥—É–º–∞–ª!",
        "–ú–µ–Ω—è–π –º–∏—Ä –∫ –ª—É—á—à–µ–º—É, –Ω–∞—á–Ω–∏ —Å —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è!",
        "–°–µ–º—å—è, –¥—Ä—É–∑—å—è –∏ –ë–æ–≥ —Ä—è–¥–æ–º ‚Äî –≤–ø–µ—Ä–µ–¥–∏ –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å!",
        "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! –ë–æ–ª—å—à–µ —Ä–∞–¥–æ—Å—Ç–∏, –º–µ–Ω—å—à–µ —ç–∫—Ä–∞–Ω–∞! üòä",
        "–°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ ‚Äî –≤–∏–¥–µ—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –≤–æ–∫—Ä—É–≥."
    ];
    if (name === "–í–µ—Ä–∞") return "–ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç —Ä–∞–¥–æ—Å—Ç–Ω—ã–º –∏ –≤–µ—Å—ë–ª—ã–º! ü¶Ñ";
    if (name === "–ú–∞—Ç–≤–µ–π") return "–ú–µ—á—Ç–∞–π, –∏–≥—Ä–∞–π, —É–∑–Ω–∞–π –Ω–æ–≤–æ–µ ‚Äî —Ç—ã –º–æ–ª–æ–¥–µ—Ü!";
    return phrases[Math.floor(Math.random()*phrases.length)];
}
function planForDay(answers, age) {
    let plan = [];
    if (age < 6) {
        plan = [
            "–ü–æ–∏–≥—Ä–∞–π —Å –∏–≥—Ä—É—à–∫–∞–º–∏ –±–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤",
            "–ü–æ–≥—É–ª—è–π –Ω–∞ —É–ª–∏—Ü–µ —Å —Ä–æ–¥–Ω—ã–º–∏",
            "–û–±–Ω–∏–º–∏ –º–∞–º—É –∏–ª–∏ –ø–∞–ø—É",
            "–ü–æ–ø—Ä–æ–±—É–π: " + (answers.goal||'—Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ')
        ];
    } else if (age < 9) {
        plan = [
            "–ü–æ–∏–≥—Ä–∞–π —Å –±—Ä–∞—Ç–æ–º/—Å–µ—Å—Ç—Ä–æ–π –∏–ª–∏ –¥—Ä—É–≥–æ–º",
            "–ü–æ–º–æ–≥–∏ –¥–æ–º–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫",
            "–î–µ–ª–∞–π –∑–∞—Ä—è–¥–∫—É –∏–ª–∏ —Ç–∞–Ω—Ü—É–π –ø–æ–¥ –º—É–∑—ã–∫—É",
            (answers.read?.includes("–ë–∏–±–ª–∏—é") ? "–ü–æ—á–∏—Ç–∞–π –ë–∏–±–ª–∏—é" : "–ü–æ—á–∏—Ç–∞–π –∫–Ω–∏–≥—É –∏–ª–∏ –ë–∏–±–ª–∏—é")
        ];
        if (IS_SUMMER) plan.push("–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!");
    } else {
        plan = [
            "–í—ã–ø–æ–ª–Ω–∏ —Å–≤–æ—é –≥–ª–∞–≤–Ω—É—é –∑–∞–¥–∞—á—É –¥–Ω—è (–∏–ª–∏ –ø—Ä–∏–¥—É–º–∞–π –Ω–æ–≤—É—é)",
            "–ó–∞–ø–∏—à–∏ –º—ã—Å–ª–∏, –ø–ª–∞–Ω—ã –∏–ª–∏ –¥–æ–º–∞—à–∫—É –≤ –¥–Ω–µ–≤–Ω–∏–∫/—Ç–µ—Ç—Ä–∞–¥—å",
            (answers.bibleclose?.includes("–ë–∏–±–ª–∏—é") || answers.read?.includes("–ë–∏–±–ª–∏—é") ? "–ß–∏—Ç–∞–π –ë–æ–∂—å–µ —Å–ª–æ–≤–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!" : "–ü—Ä–æ—á–∏—Ç–∞–π —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ç—è –±—ã –ø–∞—Ä—É —Å—Ç–∏—Ö–æ–≤ –∏–∑ –ë–∏–±–ª–∏–∏"),
            (answers.habit ? "–°–¥–µ–ª–∞–π –ø—Ä–∏–≤—ã—á–∫—É –¥–Ω—è: "+answers.habit : ""),
            "–ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π —Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–µ–∑–Ω–æ–≥–æ!"
        ].filter(Boolean);
        if (IS_SUMMER) plan.push("–õ–µ—Ç–æ–º ‚Äî –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏, –∏–Ω—Ç–µ—Ä–µ—Å—ã, –∑–Ω–∞–Ω–∏—è –∏ –¥—É—Ö–æ–≤–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è!");
    }
    return plan;
}
function buildTelegramText(username, answers, questionsList) {
    let lines = [`‚≠ê –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —ç—Ç–æ –∞–Ω–∫–µ—Ç–∞ ${username}:`];
    questionsList.forEach(q=>{
        lines.push(`${q.icon||""} ${q.label} ${answers[q.key]||""}`);
    });
    lines.push(`\n–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ —Å–µ–º–µ–π–Ω–æ–π –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ!`);
    return lines.join('\n');
}
function telegramShareBtn(text) {
    const btn = document.createElement('button');
    btn.textContent = "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º";
    btn.className = "tg-share";
    btn.onclick = () => {
        const url = 'https://t.me/share/url?url=&text=' + encodeURIComponent(text);
        if(/Android|iPhone|iPad|Mobile/i.test(navigator.userAgent)){
            window.open(url, "_blank");
        } else {
            window.open(url, "_blank");
            setTimeout(()=>{
                if(document.getElementById("tg-notify")) return;
                let note = document.createElement("div");
                note.className = 'tg-note';
                note.id = "tg-notify";
                note.textContent = "–ù–∞ –ü–ö –Ω–µ–ª—å–∑—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é ‚Äî –æ—Ç–∫—Ä–æ–π —Å–∞–π—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ, –ª–∏–±–æ —Å–∫–æ–ø–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤—å —Ä–æ–¥–∏—Ç–µ–ª—è–º –≤ –¢–µ–ª–µ–≥—Ä–∞–º!";
                btn.parentElement.appendChild(note);
            }, 400);
        }
    };
    return btn;
}
function history(user) {
    const div = document.createElement('div');
    div.style.marginTop = "16px";
    const ansList = getAnswers(user);
    if (ansList.length === 0) return div;
    const h = Object.assign(document.createElement('h3'), {textContent: '–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤:'});
    div.appendChild(h);
    ansList.forEach(item => {
        const entry = document.createElement('div');
        entry.className = "history-entry";
        entry.innerHTML = `<b>${item.date}:</b><br>` + QUESTIONS.map(q =>
            `<span>${q.icon||''}<b> ${q.label.split(' ')[0]}:</b> <span>${item.answers[q.key]}</span>`
        ).join("<br>");
        div.appendChild(entry);
    });
    return div;
}
function miniExitBtn() {
    const btn = Object.assign(document.createElement('button'), {
        textContent: "‚üµ –ù–∞–∑–∞–¥",
        onclick: ()=>{ reset(); render(); }
    });
    btn.style.margin = "12px auto 0 auto";
    btn.style.display = "block";
    btn.style.width = "120px";
    btn.style.background = "#f5f5f5";
    btn.style.color = "#667";
    btn.style.border = "1.4px solid #e0e0e0";
    btn.style.fontSize = "1.11rem";
    return btn;
}

// === –ì–õ–ê–í–ù–ê–Ø –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ===
function render() {
    app.className = "";
    app.innerHTML = "";

    if (!currentUser) {
        reset();
        app.innerHTML += "<h2>–ö—Ç–æ —Ç—ã?</h2>";
        const wrap = document.createElement('div');
        wrap.className = "user-select";
        USERS.forEach(u => {
            const btn = document.createElement('button');
            btn.className = `user-btn`;
            btn.textContent = u.name;
            btn.onclick = () => {
                currentUser = u.name;
                QUESTIONS = (currentUser === "–ù–∏–∫–∏—Ç–∞"
                    ? getNikitaQuestions() // —Å –ø–µ—Ä–µ–º–µ—à–∫–æ–π –∏ "—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
                    : QUESTIONS_SET[currentUser]) || [];
                render();
            };
            wrap.appendChild(btn);
        });
        app.appendChild(wrap);
    } else if (step < QUESTIONS.length) {
        app.className = USER_STYLES[currentUser];
        const q = QUESTIONS[step];
        const block = document.createElement('div');
        block.className = "question-block";
        block.style.background = q.bg;

        block.innerHTML = `
            <div class="question-icon">${q.icon}</div>
            <div class="question-label">${q.label}</div>
        `;
        const opts = document.createElement('div');
        opts.className = "options-row";
        let inputNode = null;
        let inputValue = '';
        let otherSelected = false;

        q.options.forEach((opt, idx) => {
            const btn = document.createElement('button');
            btn.type = "button";
            btn.className = "option-emoji";
            btn.innerHTML = `<span>${opt.emoji}</span><span style="font-size:1.13rem; margin-top:2px">${opt.text}</span>`;
            btn.onclick = () => {
                if (q.type && q.type.includes("input") && (opt.text === "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç" || idx === q.options.length-1)) {
                    if (!inputNode) {
                        otherSelected = true;
                        inputNode = document.createElement('input');
                        inputNode.type = "text";
                        inputNode.className = "opt-other-input";
                        inputNode.placeholder = "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç";
                        inputNode.oninput = e => { inputValue = e.target.value; };
                        opts.appendChild(inputNode);

                        let okBtn = document.createElement('button');
                        okBtn.type = "button";
                        okBtn.textContent = "OK";
                        okBtn.className = "option-emoji";
                        okBtn.onclick = () => {
                            if(inputValue.trim().length < 1) {inputNode.style.borderColor="red";return;}
                            answers[q.key] = inputValue.trim();
                            step++;
                            render();
                        };
                        opts.appendChild(okBtn);
                        inputNode.focus();
                    }
                } else {
                    answers[q.key] = `${opt.emoji} ${opt.text}`;
                    step++;
                    render();
                }
            };
            opts.appendChild(btn);
        });
        block.appendChild(opts);

        app.appendChild(Object.assign(document.createElement("h2"), {textContent: currentUser}));
        app.appendChild(block);
        app.appendChild(miniExitBtn());
    } else {
        let user = currentUser, age = USERS.find(u => u.name === user).age;
        saveAnswers(user, today(), answers);
        app.className = USER_STYLES[user];
        app.appendChild(Object.assign(document.createElement('h2'), {textContent: user + ", –¥–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!"}));
        let motiv = document.createElement("div");
        motiv.className = "motivation";
        motiv.textContent = motivationPhrase(user);
        app.appendChild(motiv);

        let plan = planForDay(answers, age);
        let planDiv = document.createElement("div");
        planDiv.className = "plan";
        planDiv.innerHTML = "<b>–¢–≤–æ–π –ø–ª–∞–Ω:</b><br><ul style='list-style:none;padding:0;margin:8px 0 0 0'>" +
            plan.map(item => `<li>${item}</li>`).join("") + "</ul>";
        app.appendChild(planDiv);

        // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ù–∏–∫–∏—Ç—ã
        if(currentUser === "–ù–∏–∫–∏—Ç–∞") {
            let recDiv = document.createElement("div");
            recDiv.style.background="#fff8e1";
            recDiv.style.borderRadius="12px";
            recDiv.style.margin="14px 0 10px 0";
            recDiv.style.padding="18px 14px";
            recDiv.style.color="#d84315";
            recDiv.style.fontSize="1.14rem";
            recDiv.style.fontWeight="bold";
            recDiv.innerHTML = `<b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –¥–µ–Ω—å, –ù–∏–∫–∏—Ç–∞:</b><ul style='margin:11px 0 0 0; padding-left:24px;text-align:left'>
            <li>–ó–∞–ø–∏—Å—ã–≤–∞–π –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–∏ –º—ã—Å–ª–∏) –≤ –¥–Ω–µ–≤–Ω–∏–∫ –∏–ª–∏ —Ç–µ—Ç—Ä–∞–¥—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Ä–æ–∫–æ–≤.</li>
            <li>–ü–æ—Å—Ç–∞–≤—å —Å–µ–±–µ —Ü–µ–ª—å –ø–æ–º–æ—á—å –¥–æ–º–∞ —Ö–æ—Ç—è –±—ã 1 —Ä–∞–∑ —Å–µ–≥–æ–¥–Ω—è.</li>
            <li>–ú–µ–Ω—å—à–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –±–æ–ª—å—à–µ –æ–±—â–µ–Ω–∏—è –∏ –Ω–æ–≤—ã—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.</li>
            <li>–í–µ—á–µ—Ä–æ–º —Ä–∞—Å—Å–∫–∞–∂–∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º, —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —É–∑–Ω–∞–ª, —Å–¥–µ–ª–∞–ª –∏–ª–∏ —á–µ–º—É –Ω–∞—É—á–∏–ª—Å—è.</li>
            <li>–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Ç–∫—Ä—ã–≤–∞–π –ë–∏–±–ª–∏—é ‚Äî —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥–ª–∞–≤—É.</li>
            </ul>`;
            app.appendChild(recDiv);
        }

        let results = document.createElement("div");
        results.style.margin = "18px auto 5px auto";
        results.style.background = "#fefefe";
        results.style.borderRadius = "13px";
        results.style.padding = "11px 13px 6px 13px";
        results.innerHTML = `<b>–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã —Å–µ–≥–æ–¥–Ω—è:</b><br>` +
            QUESTIONS.map(q => `<span>${q.icon || ""} <b>${q.label}:</b> <span>${answers[q.key]}</span>`).join("<br>");
        app.appendChild(results);

        // –ö–Ω–æ–ø–∫–∞ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º
        let shareText = buildTelegramText(user, answers, QUESTIONS);
        app.appendChild(telegramShareBtn(shareText));

        // –ò—Å—Ç–æ—Ä–∏—è –∏ –ø–æ–≤—Ç–æ—Ä
        app.appendChild(history(user));
        let again = Object.assign(document.createElement('button'), {
            textContent: "‚ü≤ –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑",
            onclick: ()=>{
                answers = {};
                step = 0; render();
            }
        });
        again.style.margin = "12px 0 0 0";
        app.appendChild(again);
        app.appendChild(miniExitBtn());
    }
}
render();
