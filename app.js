// ==== –î–ê–ù–ù–´–ï ====
const USERS = [
    {name: "–í–µ—Ä–∞", age: 4},
    {name: "–ú–∞—Ç–≤–µ–π", age: 7},
    {name: "–ù–∏–∫–∏—Ç–∞", age: 12}
];

const QUESTIONS = [
    {
        label: "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",
        key: "feel",
        type: "select",
        options: ["–í–µ—Å–µ–ª–æ!", "–õ–∞–¥–Ω–æ", "–£—Å—Ç–∞–ª(–∞)", "–ù–µ –∑–Ω–∞—é"]
    },
    {
        label: "–ß—Ç–æ —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å?",
        key: "dream",
        type: "text"
    },
    {
        label: "–ß–µ–≥–æ —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞—Ç—å?",
        key: "goal",
        type: "text"
    }
];

// ==== –£–¢–ò–õ–ò–¢–´ ====

function saveAnswers(user, date, answers) {
    const storageKey = "answers_" + user;
    let all = JSON.parse(localStorage.getItem(storageKey) || "[]");
    // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
    all = all.filter(record => record.date !== date);
    all.unshift({date, answers});
    localStorage.setItem(storageKey, JSON.stringify(all.slice(0, 10))); // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ 10 –¥–Ω–µ–π
}

function getAnswers(user) {
    const storageKey = "answers_" + user;
    return JSON.parse(localStorage.getItem(storageKey) || "[]");
}

function today() {
    const d = new Date();
    return d.getFullYear() + "-" + String(d.getMonth()+1).padStart(2,'0') + "-" + String(d.getDate()).padStart(2,'0');
}

function motivationPhrase() {
    const phrases = [
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ! üöÄ",
        "–¢—ã —Å–º–æ–∂–µ—à—å –≤—Å—ë, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å!",
        "–°–¥–µ–ª–∞–π —Å–µ–≥–æ–¥–Ω—è —á—Ç–æ-—Ç–æ –¥–æ–±—Ä–æ–µ!",
        "–í–µ—Ä—å –≤ —Å–µ–±—è, —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è!",
        "–ú–µ–Ω—å—à–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏–≥—Ä!"
    ];
    // –°–ª—É—á–∞–π–Ω–∞—è —Ñ—Ä–∞–∑–∞
    return phrases[Math.floor(Math.random()*phrases.length)];
}

function planForDay(goal, age) {
    let ideas = [
        "–ü–æ–∏–≥—Ä–∞–π –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ö–æ—Ç—è –±—ã 1 —á–∞—Å",
        "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É",
        "–°–¥–µ–ª–∞–π –∑–∞—Ä—è–¥–∫—É —Å —É—Ç—Ä–∞",
        "–ü–æ–º–æ–≥–∏ –∫–æ–º—É-—Ç–æ –∏–∑ —Å–µ–º—å–∏",
        "–ü—Ä–∏–¥—É–º–∞–π –≤–µ—Å—ë–ª—É—é –∏–≥—Ä—É",
        "–ü–æ–≥—É–ª—è–π –Ω–∞ —É–ª–∏—Ü–µ",
        "–ü—Ä–æ–≤–µ–¥–∏ –≤—Ä–µ–º—è –∑–∞ –∫–Ω–∏–≥–æ–π –∏–ª–∏ –∏–≥—Ä–æ–π"
    ];
    if (!goal) goal = "–ß—Ç–æ-–Ω–∏–±—É–¥—å –Ω–æ–≤–æ–µ";
    // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    if (age < 6) {
        return [
            "–ü–æ–∏–≥—Ä–∞–π —Å –∏–≥—Ä—É—à–∫–∞–º–∏ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            "–ü–æ–≥—É–ª—è–π —Å –∫–µ–º-–Ω–∏–±—É–¥—å –¥–æ–º–∞ –∏–ª–∏ –Ω–∞ —É–ª–∏—Ü–µ",
            `–ü–æ–ø—Ä–æ–±—É–π: "${goal}"`
        ];
    }
    if (age < 9) {
        return [
            "–ü–æ–∏–≥—Ä–∞–π —Å –¥—Ä—É–≥–æ–º/—Å–µ—Å—Ç—Ä–æ–π/–±—Ä–∞—Ç–æ–º",
            "–ü–æ–º–æ–≥–∏ –º–∞–º–µ –∏–ª–∏ –ø–∞–ø–µ",
            `–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ—è —Ü–µ–ª—å: "${goal}"`
        ];
    }
    return [
        "–ü–æ—Å—Ç–∞–≤—å —Å–µ–±–µ –º–∞–ª–µ–Ω—å–∫—É—é –∑–∞–¥–∞—á—É ‚Äî –≤—ã–ø–æ–ª–Ω–∏ —Å–∞–º!",
        "–†–∞–∑–¥–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω/–≥–∞–¥–∂–µ—Ç—ã —Å –¥–µ–ª–æ–º: —Å–Ω–∞—á–∞–ª–∞ –¥–µ–ª–æ, –ø–æ—Ç–æ–º —ç–∫—Ä–∞–Ω.",
        `–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Å–≤–æ—é —Ü–µ–ª—å: "${goal}"`
    ];
}

// ==== –†–ï–ù–î–ï–† ====

const app = document.getElementById('app');
let currentUser = null;

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Ä–µ–Ω–¥–µ—Ä)
function render() {
    app.innerHTML = "";
    app.appendChild(header());
    if (!currentUser) {
        app.appendChild(userSelect());
    } else {
        app.appendChild(motivation());
        app.appendChild(form());
        app.appendChild(history());
    }
}
function header() {
    const h = document.createElement('h1');
    h.textContent = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!';
    return h;
}
function userSelect() {
    const wrap = document.createElement('div');
    wrap.className = 'user-select';
    USERS.forEach(user => {
        const b = document.createElement('button');
        b.className = 'user-btn';
        b.textContent = user.name;
        b.onclick = () => { currentUser = user.name; render(); };
        wrap.appendChild(b);
    });
    return wrap;
}
function motivation() {
    const div = document.createElement('div');
    div.className = 'motivation';
    div.textContent = motivationPhrase();
    return div;
}
function form() {
    const form = document.createElement('form');
    form.onsubmit = (e) => {
        e.preventDefault();
        const ans = {};
        QUESTIONS.forEach(q => {
            ans[q.key] = form.elements[q.key].value?.trim();
        });
        saveAnswers(currentUser, today(), ans);
        render();
    };
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫: –∏–º—è
    const username = currentUser;
    form.appendChild(Object.assign(document.createElement('h2'), {textContent: username}));

    // –í–æ–ø—Ä–æ—Å—ã
    QUESTIONS.forEach(q => {
        const lab = Object.assign(document.createElement('label'), {className: 'question', htmlFor: q.key, textContent: q.label});
        form.appendChild(lab);

        let input;
        if (q.type === "select") {
            input = document.createElement('select');
            q.options.forEach(opt => {
                const o = document.createElement('option');
                o.value = opt; o.textContent = opt;
                input.appendChild(o);
            });
        } else {
            input = document.createElement('input');
            input.type = "text";
            input.placeholder = "–ö–æ—Ä–æ—Ç–∫–æ...";
        }
        input.name = q.key;
        input.id = q.key;
        form.appendChild(input);
    });

    // –ö–Ω–æ–ø–∫–∞
    const btn = document.createElement('button');
    btn.type = 'submit';
    btn.textContent = '–ì–æ—Ç–æ–≤–æ!';
    form.appendChild(btn);

    // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω–∏-–ø–ª–∞–Ω –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    const planDiv = document.createElement('div');
    planDiv.className = 'plan hide';
    form.oninput = function() {
        const goalVal = form.elements['goal'].value;
        planDiv.innerHTML = "";
        if (goalVal.trim().length > 0) {
            planDiv.classList.remove('hide');
            let age = USERS.find(u => u.name === currentUser).age;
            let planList = planForDay(goalVal, age);
            planDiv.innerHTML = `<b>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø–ª–∞–Ω:</b><ul>` +
                planList.map(item => `<li>${item}</li>`).join("") + `</ul>`;
        } else {
            planDiv.classList.add('hide');
        }
    };
    form.appendChild(planDiv);

    return form;
}
function history() {
    const div = document.createElement('div');
    div.className = 'history';

    const ansList = getAnswers(currentUser);
    if (ansList.length === 0) return div;
    const h = Object.assign(document.createElement('h3'), {textContent: '–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤:'});
    div.appendChild(h);

    // –ö—Ä–∞—Ç–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π
    ansList.forEach(item => {
        const entry = document.createElement('div');
        entry.className = 'history-entry';
        entry.innerHTML = `<b>${item.date}:</b><br>` +
            QUESTIONS.map(q => `<b>${q.label}</b> <span>${item.answers[q.key]}</span>`).join('<br>');

        // –ü–æ–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏-–ø–ª–∞–Ω
        let age = USERS.find(u => u.name === currentUser).age;
        let plan = planForDay(item.answers.goal, age);
        entry.innerHTML += `<div class="plan"><b>–ü–ª–∞–Ω:</b> ${plan.join('; ')}</div>`;
        div.appendChild(entry);
    });

    // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    const back = Object.assign(document.createElement('button'), {
        textContent: "‚üµ –°–º–µ–Ω–∏—Ç—å –∏–º—è",
        onclick: () => { currentUser = null; render(); }
    });
    div.appendChild(back);

    return div;
}

// ==== –°–¢–ê–†–¢ ====
render();
